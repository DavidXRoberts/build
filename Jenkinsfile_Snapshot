pipeline {
// Initially run on any agent
   agent any
   environment {
//Configure Maven from the maven tooling in Jenkins
      def mvnHome = tool 'Default'
      PATH = "${mvnHome}/bin:${env.PATH}"
      
//Set some defaults
      def workspace = pwd()
   }
   stages {

   
// Set up the workspace, clear the git directories and setup the manve settings.xml files
      stage('prep-workspace') { 
         steps {
            configFileProvider([configFile(fileId: '86dde059-684b-4300-b595-64e83c2dd217', targetLocation: 'settings.xml')]) {
            }
         
            dir('repository/dev.galasa') {
               deleteDir()
            }
            dir('repository/dev/galasa') {
               deleteDir()
            }
         }
      }
      
// Snap the docker images
      stage('snap-docker') {
         steps {
            withFolderProperties { 
         	sh "docker pull ${env.DOCKER_REPO}/galasa-boot-embedded-amd64:${env.DOCKER_SOURCE_VERSION}" 
         	sh "docker pull ${env.DOCKER_REPO}/galasa-ibm-boot-embedded-amd64:${env.DOCKER_SOURCE_VERSION}" 
         	sh "docker pull ${env.DOCKER_REPO}/galasa-resources-amd64:${env.DOCKER_SOURCE_VERSION}" 
         	sh "docker pull ${env.DOCKER_REPO}/galasa-p2-amd64:${env.DOCKER_SOURCE_VERSION}" 
         	sh "docker pull ${env.DOCKER_REPO}/galasa-javadoc-amd64:${env.DOCKER_SOURCE_VERSION}" 
            sh "docker pull ${env.DOCKER_REPO}/galasa-webui-amd64:${env.DOCKER_SOURCE_VERSION}" 
            sh "docker pull ${env.DOCKER_REPO}/galasa-isolated-resources-amd64:${env.DOCKER_SOURCE_VERSION}" 
            sh "docker pull ${env.DOCKER_REPO}/galasa-isolated-full-amd64:${env.DOCKER_SOURCE_VERSION}" 
            sh "docker pull ${env.DOCKER_REPO}/galasa-isolated-mvp-amd64:${env.DOCKER_SOURCE_VERSION}" 
         	sh "docker pull ${env.DOCKER_REPO}/galasa-githashes:${env.DOCKER_SOURCE_VERSION}" 

         	sh "docker tag ${env.DOCKER_REPO}/galasa-boot-embedded-amd64:${env.DOCKER_SOURCE_VERSION}       ${env.DOCKER_REPO}/galasa-boot-embedded-amd64:${env.DOCKER_TARGET_VERSION}" 
         	sh "docker tag ${env.DOCKER_REPO}/galasa-ibm-boot-embedded-amd64:${env.DOCKER_SOURCE_VERSION}   ${env.DOCKER_REPO}/galasa-ibm-boot-embedded-amd64:${env.DOCKER_TARGET_VERSION}" 
         	sh "docker tag ${env.DOCKER_REPO}/galasa-resources-amd64:${env.DOCKER_SOURCE_VERSION}           ${env.DOCKER_REPO}/galasa-resources-amd64:${env.DOCKER_TARGET_VERSION}" 
         	sh "docker tag ${env.DOCKER_REPO}/galasa-p2-amd64:${env.DOCKER_SOURCE_VERSION}                  ${env.DOCKER_REPO}/galasa-p2-amd64:${env.DOCKER_TARGET_VERSION}" 
         	sh "docker tag ${env.DOCKER_REPO}/galasa-javadoc-amd64:${env.DOCKER_SOURCE_VERSION}             ${env.DOCKER_REPO}/galasa-javadoc-amd64:${env.DOCKER_TARGET_VERSION}" 
            sh "docker tag ${env.DOCKER_REPO}/galasa-webui-amd64:${env.DOCKER_SOURCE_VERSION}               ${env.DOCKER_REPO}/galasa-webui-amd64:${env.DOCKER_TARGET_VERSION}" 
            sh "docker tag ${env.DOCKER_REPO}/galasa-isolated-resources-amd64:${env.DOCKER_SOURCE_VERSION}  ${env.DOCKER_REPO}/galasa-isolated-resources-amd64:${env.DOCKER_TARGET_VERSION}" 
            sh "docker tag ${env.DOCKER_REPO}/galasa-isolated-full-amd64:${env.DOCKER_SOURCE_VERSION}       ${env.DOCKER_REPO}/galasa-isolated-full-amd64:${env.DOCKER_TARGET_VERSION}" 
            sh "docker tag ${env.DOCKER_REPO}/galasa-isolated-mvp-amd64:${env.DOCKER_SOURCE_VERSION}        ${env.DOCKER_REPO}/galasa-isolated-mvp-amd64:${env.DOCKER_TARGET_VERSION}" 
         	sh "docker tag ${env.DOCKER_REPO}/galasa-githashes:${env.DOCKER_SOURCE_VERSION}                 ${env.DOCKER_REPO}/galasa-githashes:${env.DOCKER_TARGET_VERSION}" 
         
         	sh "docker push ${env.DOCKER_REPO}/galasa-boot-embedded-amd64:${env.DOCKER_TARGET_VERSION}" 
         	sh "docker push ${env.DOCKER_REPO}/galasa-ibm-boot-embedded-amd64:${env.DOCKER_TARGET_VERSION}" 
         	sh "docker push ${env.DOCKER_REPO}/galasa-resources-amd64:${env.DOCKER_TARGET_VERSION}" 
         	sh "docker push ${env.DOCKER_REPO}/galasa-p2-amd64:${env.DOCKER_TARGET_VERSION}" 
         	sh "docker push ${env.DOCKER_REPO}/galasa-javadoc-amd64:${env.DOCKER_TARGET_VERSION}" 
            sh "docker push ${env.DOCKER_REPO}/galasa-webui-amd64:${env.DOCKER_TARGET_VERSION}" 
            sh "docker push ${env.DOCKER_REPO}/galasa-isolated-resources-amd64:${env.DOCKER_TARGET_VERSION}" 
            sh "docker push ${env.DOCKER_REPO}/galasa-isolated-full-amd64:${env.DOCKER_TARGET_VERSION}" 
            sh "docker push ${env.DOCKER_REPO}/galasa-isolated-mvp-amd64:${env.DOCKER_TARGET_VERSION}" 
         	sh "docker push ${env.DOCKER_REPO}/galasa-githashes:${env.DOCKER_TARGET_VERSION}" 
         	}
         }
      }
      
// Clean the target 
      stage('clean-repository') {
         when {
           environment name: 'GIT_BRANCH', value: 'origin/master'
         }
         steps {
            withFolderProperties { 
         	    sh "mvn --settings ${workspace}/settings.xml -Dmaven.repo.local=${workspace}/repository -B -e -P ${env.MAVEN_PROFILE} dev.galasa:galasastaging-maven-plugin:cleannexusrepo -Dgalasa.source.repo.nexus=${env.NEXUS_SERVER}/service/rest -Dgalasa.source.repo.id=galasa.snapshot.repo -Dgalasa.source.repo.name=${env.MAVEN_REPO}" 
            }
         }
      }
      
// Deploy the maven artifacts
      stage('deploy-repository') {
         steps {
         	dir('integrationTesting/staging') {
         	    withFolderProperties { 
         		sh "mvn --settings ${workspace}/settings.xml -Dmaven.repo.local=${workspace}/repository -B -e -P ${env.MAVEN_PROFILE} clean dev.galasa:galasastaging-maven-plugin:deployartifacts -Dgalasa.target.repo=${env.NEXUS_SERVER}/repository/${env.MAVEN_REPO} -Dgalasa.target.repo.id=galasa.snapshot.repo -Dgalasa.settings.file=${workspace}/settings.xml"
         		
         		dir('target') {
         		   sh "chmod +x deploy.sh"
         		   sh "./deploy.sh"
         		} 
         		}
		    }
         }
      }
   }
}
