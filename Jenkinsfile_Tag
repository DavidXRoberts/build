pipeline {
   agent any
   stages {
       stage('extract-githash') {
           steps {
               withFolderProperties {
                  sh(script: "docker rm -f hashes", returnStatus: true)
                  sh "docker pull ${env.DOCKER_REPO}/galasa-githashes:${env.DOCKER_TARGET_VERSION}"
                  sh "docker create --name hashes ${env.DOCKER_REPO}/galasa-githashes:${env.DOCKER_TARGET_VERSION} dummy"
               }
               dir('hashes') {
                 deleteDir()
               }
             
               dir('hashes') {
                   sh "docker cp hashes:maven.hash ."
                   sh "docker cp hashes:framework.hash ."
                   sh "docker cp hashes:extensions.hash ."
                   sh "docker cp hashes:managers.hash ."
                   sh "docker cp hashes:simbank.hash ."
                   sh "docker cp hashes:inttests.hash ."
                   sh "docker cp hashes:build.hash ."
               }
           }
       }
       stage('tag-maven') {
            steps {
               dir('git/maven') {
                  deleteDir()
                  
                  script {
                    env.HASH = readFile '../../hashes/maven.hash'
                   }
                   
         	      withCredentials([sshUserPrivateKey(credentialsId: 'public-github-cicsdeliverytest', keyFileVariable: 'GITKEY')]) {
         	         sh "GIT_SSH_COMMAND=\"ssh -i ${GITKEY}\" git clone -b integrationok git@github.com:galasa-dev/maven.git"
         	         
         	         dir('maven') {
                        sh "git merge --ff-only ${env.HASH}"
                        sh "GIT_SSH_COMMAND=\"ssh -i ${GITKEY}\" git push origin integrationok"
         	         }
         	      }
               }
            }
        }
       stage('tag-framework') {
            steps {
               dir('git/framework') {
                  deleteDir()
                  
                  script {
                    env.HASH = readFile '../../hashes/framework.hash'
                   }
                   
         	      withCredentials([sshUserPrivateKey(credentialsId: 'public-github-cicsdeliverytest', keyFileVariable: 'GITKEY')]) {
         	         sh "GIT_SSH_COMMAND=\"ssh -i ${GITKEY}\" git clone -b integrationok git@github.com:galasa-dev/framework.git"
         	         
         	         dir('framework') {
                        sh "git merge --ff-only ${env.HASH}"
                        sh "GIT_SSH_COMMAND=\"ssh -i ${GITKEY}\" git push origin integrationok"
         	         }
                   }
                }
            }
        }
       stage('tag-extensions') {
            steps {
               dir('git/extensions') {
                  deleteDir()
                  
                  script {
                    env.HASH = readFile '../../hashes/extensions.hash'
                   }
                   
         	      withCredentials([sshUserPrivateKey(credentialsId: 'public-github-cicsdeliverytest', keyFileVariable: 'GITKEY')]) {
         	         sh "GIT_SSH_COMMAND=\"ssh -i ${GITKEY}\" git clone -b integrationok git@github.com:galasa-dev/extensions.git"
         	         
         	         dir('extensions') {
                        sh "git merge --ff-only ${env.HASH}"
                        sh "GIT_SSH_COMMAND=\"ssh -i ${GITKEY}\" git push origin integrationok"
         	         }
                   }
                }
            }
        }
       stage('tag-managers') {
            steps {
               dir('git/managers') {
                  deleteDir()
                  
                  script {
                    env.HASH = readFile '../../hashes/managers.hash'
                   }
                   
         	      withCredentials([sshUserPrivateKey(credentialsId: 'public-github-cicsdeliverytest', keyFileVariable: 'GITKEY')]) {
         	         sh "GIT_SSH_COMMAND=\"ssh -i ${GITKEY}\" git clone -b integrationok git@github.com:galasa-dev/managers.git"
         	         
         	         dir('mamanagersven') {
                        sh "git merge --ff-only ${env.HASH}"
                        sh "GIT_SSH_COMMAND=\"ssh -i ${GITKEY}\" git push origin integrationok"
         	         }
                   }
                }
            }
        }
       stage('tag-simplatform') {
            steps {
               dir('git/simplatform') {
                  deleteDir()
                  
                  script {
                    env.HASH = readFile '../../hashes/simbank.hash'
                   }
                   
         	      withCredentials([sshUserPrivateKey(credentialsId: 'public-github-cicsdeliverytest', keyFileVariable: 'GITKEY')]) {
         	         sh "GIT_SSH_COMMAND=\"ssh -i ${GITKEY}\" git clone -b integrationok git@github.com:galasa-dev/simplatform.git"
         	         
         	         dir('simplatform') {
                        sh "git merge --ff-only ${env.HASH}"
                        sh "GIT_SSH_COMMAND=\"ssh -i ${GITKEY}\" git push origin integrationok"
         	         }
                   }
                }
            }
        }
       stage('tag-integratedtests') {
            steps {
               dir('git/integratedtests') {
                  deleteDir()
                  
                  script {
                    env.HASH = readFile '../../hashes/inttests.hash'
                   }
                   
         	      withCredentials([sshUserPrivateKey(credentialsId: 'public-github-cicsdeliverytest', keyFileVariable: 'GITKEY')]) {
         	         sh "GIT_SSH_COMMAND=\"ssh -i ${GITKEY}\" git clone -b integrationok git@github.com:galasa-dev/integratedtests.git"
         	         
         	         dir('integratedtests') {
                        sh "git merge --ff-only ${env.HASH}"
                        sh "GIT_SSH_COMMAND=\"ssh -i ${GITKEY}\" git push origin integrationok"
         	         }
                   }
                }
            }
        }
       stage('tag-build') {
            steps {
               dir('git/maven') {
                  deleteDir()
                  
                  script {
                    env.HASH = readFile '../../hashes/build.hash'
                   }
                   
         	      withCredentials([sshUserPrivateKey(credentialsId: 'public-github-cicsdeliverytest', keyFileVariable: 'GITKEY')]) {
         	         sh "GIT_SSH_COMMAND=\"ssh -i ${GITKEY}\" git clone -b integrationok git@github.com:galasa-dev/build.git"
         	         
         	         dir('build') {
                        sh "git merge --ff-only ${env.HASH}"
                        sh "GIT_SSH_COMMAND=\"ssh -i ${GITKEY}\" git push origin integrationok"
         	         }
                   }
                }
            }
        }
    }
}