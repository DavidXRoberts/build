def mvnProfile        = 'dev,whitelistbuild'

pipeline {
// Initially run on any agent
   agent {
      label 'docker-amd64'
   }
   options { timestamps () }
   environment {
//Configure Maven from the maven tooling in Jenkins
      def mvnHome = tool 'Default'
      PATH = "${mvnHome}/bin:${env.PATH}"
      
//Set some defaults
      def workspace = pwd()
      def mvnGoal    = 'install'
   }
   stages {
// for debugging purposes
      stage('report') {
         steps {
            echo "Branch/Tag          : ${env.GIT_BRANCH}"
            echo "Commit Hash         : ${env.GIT_COMMIT}"
            echo "Workspace directory : ${workspace}"
            echo "Maven profile       : ${mvnProfile}"
         }
      }
   
// Set up the workspace, clear the git directories and setup the maven settings.xml files
      stage('prep-workspace') { 
         steps {
            configFileProvider([configFile(fileId: '86dde059-684b-4300-b595-64e83c2dd217', targetLocation: 'settings.xml')]) {
            }
            dir('repository/dev.galasa') {
               deleteDir()
            }
            dir('repository/dev/galasa') {
               deleteDir()
            }
         }
      }
      
      stage('Extract Artifacts') {
         steps {
            dir('docker/whitelist') {
               sh "mvn --settings ${workspace}/settings.xml -Dmaven.repo.local=${workspace}/repository -P ${mvnProfile} -Dgalasa.output.directory=target -B -e -fae dev.galasa:galasastaging-maven-plugin:0.9.0-SNAPSHOT:extractartifacts"
            }
         }
      }
      
      stage('Build Docker Image') {
         steps {
            withFolderProperties { 
               dir('docker/whitelist') {
                  sh "docker build -t ${env.DOCKER_REPO}/galasa-offline-maven-generic:${env.DOCKER_VERSION} ." 
               }
            }
         }
      }
      
      stage('Push Docker Image') {
         steps {
            withFolderProperties { 
               dir('docker/whitelist') {
                  sh "docker push ${env.DOCKER_REPO}/galasa-offline-maven-generic:${env.DOCKER_VERSION}" 
               }
            }
         }
      }
   }
//   post {
//       // triggered when red sign
//       failure {
//           slackSend (channel: '#project-galasa-devs', color: '#FF0000', message: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
//       }
//    }
}
